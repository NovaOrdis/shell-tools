#!/usr/bin/env bash

DEBUG=false

declare -A POST_INSTALLATION_STEPS

function help() {

cat <<EOF

The authoritative source of logic to fully configure a new development Mac or to periodically
update a previously configured Mac. Executing the utility with 'help' displays this.

	mac-setup help

Executing the utility with no arguments attempts to install/update all tracked packages.
Theoretically is safe to repeatedly run the utility without any bad side effects, except
updating components to their latest versions. Most of the utility are installed and updated
with brew and we resort to custom only when brew cannot help.

	mac-setup

Individual packages can be installed/upgraded by specifying their name on command line, separated
by spaces.


	mac-setup gnu-sed

EOF
}

function setup-sequence() {

    debug "args: $*"

    setup-bash-startup-files

    generate-ssh-key

    #
    # Package installation
    #

    local all=true

    #
    # TODO: this is awkward, we should replace with variable substitution or an associative array
    #

    local brew=false
    local bash=false
    local gnu_sed=false
    local thunderbird=false
    local iterm2=false
    local secure_pipes=false
    local intellij=false

    while [ -n "$1" ]; do

        #
        # TODO: this is awkward, we should replace with variable substitution or an associative array
        #
        all=false

        if [ "$1" = "brew" ]; then
            brew=true
        elif [ "$1" = "bash" ]; then
            bash=true
        elif [ "$1" = "gnu-sed" ]; then
            gnu_sed=true
        elif [ "$1" = "thunderbird" ]; then
            thunderbird=true
        elif [ "$1" = "iterm2" ]; then
            iterm2=true
        elif [ "$1" = "secure-pipes" ]; then
            secure_pipes=true
        elif [ "$1" = "intellij" ]; then
            intellij=true
        fi

        shift 
    done

    debug "brew: ${brew}"
    debug "bash: ${bash}"
    debug "gnu_sed: ${gnu_sed}"
    debug "thunderbird: ${thunderbird}"
    debug "iterm2: ${iterm2}"
    debug "secure_pipes: ${secure_pipes}"
    debug "intellij: ${intellij}"

    (${all} || ${brew}) && install-or-update-brew
    (${all} || ${bash}) && install-or-update-bash
    (${all} || ${gnu_sed}) && install-or-update-gnu-sed
    (${all} || ${thunderbird}) && install-thunderbird
    (${all} || ${iterm2}) && install-or-upgrade-iterm2
    (${all} || ${secure_pipes}) && install-or-upgrade-secure-pipes
    (${all} || ${intellij}) && install-or-upgrade-intellij

    post-configuration-report-and-next-steps
}

function main() {

    #
    # This code was written to be as portable as possible, so it can be executed by a really old
    # version of bash - at this point we don't know if we have a new bash version
    #

    local args 

    while [ -n "$1" ]; do

        if [ "$1" = "-d" ]; then

            DEBUG=true

        elif [ -z "${args}" ]; then

            args=$1

        else

            args="${args} $1"
        fi

        shift;

    done

    if [ "${args}" = "help" ]; then

        help;
        exit 1

    fi

    setup-sequence ${args};
}

#
# an error will stop the entire script execution and make it exit with a non-zero value
#
function error() {

    echo "[mac-setup error]: $@" 1>&2
    exit 1
}

function debug() {

    ${DEBUG} && echo "${FUNCNAME[1]}(): $@" 1>&2;
}

function info() {

    echo "[mac-setup]: $@" 1>&2;
}

#
# Only if they don't exist
#
function setup-bash-startup-files() {

    debug 

    [ ! -f ~/.bash_profile ] && { echo 'if [ -f ~/.bashrc ]; then . ~/.bashrc; fi' > ~/.bash_profile; info "created .bash_profile"; }
    [ ! -f ~/.bashrc ] && { echo "" > ~/.bashrc; info "created .bashrc"; }
}

#
# Only if it does not exist
#
function generate-ssh-key() {

    debug

    [ -f ~/.ssh/id_rsa ] && return 0

    ssh-keygen -q -b 2048 -P "" -f ~/.ssh/id_rsa -t rsa || error "failed to create SSH key"

    chmod -R go-rwx ~/.ssh

    info "created SSH key"
}

function add-to-head-of-user-path() {

    debug $*

    [ -z "$1" ] && return 0

    #
    # if it is already there, noop
    #

    local regex=${1//\//\\/}

    debug "regex: ${regex}"

    if grep ${regex} ~/.bashrc > /dev/null; then

        info "$1 already in PATH"
        return 0
    fi

    echo "PATH=$1:\${PATH}" >> ~/.bashrc

    info "added $1 to the head of user PATH"
    
} 

function post-configuration-report-and-next-steps() {

    if [ "${#POST_INSTALLATION_STEPS[@]}" = "0" ]; then
        echo ""
        echo "There are no post-installation steps."
        echo ""
        return 0;
    fi

    echo ""
    echo "Post-installation steps:"
    echo ""

    local cnt=1

    for i in "${!POST_INSTALLATION_STEPS[@]}"; do
        printf "$((cnt++)). ${POST_INSTALLATION_STEPS[${i}]}"
        echo ""
        echo ""
    done
}

function install-or-update-brew() {

    if brew --version 1>/dev/null 2>&1; then

        info "upgrading brew ..."

        brew update && info "brew updated" || exit 1
        brew doctor && info "brew installation verified" || exit 1

    else

        info "installing brew ..."

        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" && \
            info "brew installed" || \
            { error "failed to install brew"; exit 1; }

        info "installing cask ..."

        brew tap caskroom/cask && info "cask installed" || exit 1

        info "running homebrew doctor ..."
        brew doctor info "doctor ok" || exit 1
    fi
}

function install-or-update-bash() {

    info "installing/upgrading bash ..."

    brew install bash && info "bash installed/upgraded ..." || { error "failed to install/upgrade bash"; exit 1; }
}

function install-or-update-gnu-sed() {

    local upgrade=false

    sed --version 2>&1 | grep "GNU sed" > /dev/null 2>&1 && upgrade=true

    local text

    ${upgrade} && text="upgrad" || text="install"

    info "${text}ing GNU sed ..."

    brew install gnu-sed && info "GNU sed ${text}ed" || { error "failed to ${text} GNU sed"; exit 1; }

    #
    # --with-default-names has been removed since Jan 2019, so we need to to this instead:
    #

    add-to-head-of-user-path /usr/local/opt/gnu-sed/libexec/gnubin
}

function install-thunderbird() {

    [ -d /Applications/Thunderbird.app ] && { info "Thunderbird already installed"; return 0; }

    info "installing Thunderbird ..."

    brew cask install thunderbird && info "Thunderbird installed ..." || { error "failed to install Thunderbird"; exit 1; }

    POST_INSTALLATION_STEPS["thunderbird"]="Start Thunderbird and configure accounts manually. See https://kb.novaordis.com/index.php/Thunderbird_Configuration#Overview."
}

function install-or-upgrade-iterm2() {

    brew cask install iterm2 

    POST_INSTALLATION_STEPS["iterm2"]="Start iterm2, 'Keep in Dock' and move on the right position in Dock.\n   Then configure: Profiles -> Open Profiles -> Edit Profiles -> Default\n       Colors -> Color Presets -> Light Background\n       Text -> Font -> 12 pt Menlo Regular"

}

function install-or-upgrade-secure-pipes() {

    brew cask install secure-pipes

    POST_INSTALLATION_STEPS["secure-pipes"]="Configure secure-pipes"

}

function install-or-upgrade-intellij() {

    brew cask install intellij-idea

    POST_INSTALLATION_STEPS["intellij"]="Configure IntelliJ\n    * Install license\n    * Install the bash plugin"
}

main "$@"
