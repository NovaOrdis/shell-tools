#!/usr/bin/env bash

[ -f $(dirname $0)/lib/bash.shlib ] && . $(dirname $0)/lib/bash.shlib || { echo "$(dirname $0)/lib/bash.shlib not found" 1>&2; exit 1; }

DEBUG=false

declare -A POST_INSTALLATION_STEPS

function help() {

cat <<EOF

The authoritative source of logic to fully configure a new development Mac or to periodically
update a previously configured Mac. Executing the utility with 'help' displays this.

	mac-setup help

Executing the utility with no arguments attempts to install/update all tracked packages.
Theoretically is safe to repeatedly run the utility without any bad side effects, except
updating components to their latest versions. Most of the utility are installed and updated
with brew and we resort to custom only when brew cannot help.

	mac-setup

Individual packages can be installed/upgraded by specifying their name on command line, separated
by spaces.


	mac-setup gnu-sed

EOF
}

function setup-sequence() {

    debug "args: $*"

    setup-bash-startup-files

    generate-ssh-key

    install-shell-tools

    create-tmp

    #
    # Package installation
    #

    local all=true

    #
    # TODO: this is awkward, we should replace with variable substitution or an associative array
    #

    local brew=false
    local bash=false
    local gnu_sed=false
    local gnu_getopt=false
    local thunderbird=false
    local iterm2=false
    local secure_pipes=false
    local intellij=false
    local java=false
    local maven=false
    local git=false
    local openoffice=false
    local chrome=false

    while [ -n "$1" ]; do

        #
        # TODO: this is awkward, we should replace with variable substitution or an associative array
        #
        all=false

        if [ "$1" = "brew" ]; then
            brew=true
        elif [ "$1" = "bash" ]; then
            bash=true
        elif [ "$1" = "gnu-sed" ]; then
            gnu_sed=true
        elif [ "$1" = "gnu-getopt" ]; then
            gnu_getopt=true
        elif [ "$1" = "thunderbird" ]; then
            thunderbird=true
        elif [ "$1" = "iterm2" ]; then
            iterm2=true
        elif [ "$1" = "secure-pipes" ]; then
            secure_pipes=true
        elif [ "$1" = "intellij" ]; then
            intellij=true
        elif [ "$1" = "java" ]; then
            java=true
        elif [ "$1" = "maven" ]; then
            maven=true
        elif [ "$1" = "git" ]; then
            git=true
        elif [ "$1" = "openoffice" ]; then
            openoffice=true
        elif [ "$1" = "chrome" ]; then
            chrome=true
        fi

        shift 
    done

    debug "brew: ${brew}"
    debug "bash: ${bash}"
    debug "gnu_sed: ${gnu_sed}"
    debug "gnu_getopt: ${gnu_getopt}"
    debug "thunderbird: ${thunderbird}"
    debug "iterm2: ${iterm2}"
    debug "secure_pipes: ${secure_pipes}"
    debug "intellij: ${intellij}"
    debug "java: ${java}"
    debug "maven: ${maven}"
    debug "git: ${git}"
    debug "openoffice: ${openoffice}"
    debug "chrome: ${chrome}"


    (${all} || ${brew}) && install-or-update-brew
    (${all} || ${bash}) && install-or-update-bash
    (${all} || ${gnu_sed}) && install-or-update-gnu-sed
    (${all} || ${gnu_getopt}) && install-or-update-gnu-getopt
    (${all} || ${thunderbird}) && install-thunderbird
    (${all} || ${iterm2}) && install-or-upgrade-iterm2
    (${all} || ${secure_pipes}) && install-or-upgrade-secure-pipes
    (${all} || ${intellij}) && install-or-upgrade-intellij
    (${all} || ${java}) && install-or-upgrade-java
    (${all} || ${maven}) && install-or-upgrade-maven
    (${all} || ${git}) && install-or-upgrade-git
    (${all} || ${openoffice}) && install-or-upgrade-openoffice
    (${all} || ${chrome}) && install-or-upgrade-chrome

    #
    # optional
    #

    # brew cask install postman

    post-configuration-report-and-next-steps
}

function main() {

    #
    # This code was written to be as portable as possible, so it can be executed by a really old
    # version of bash - at this point we don't know if we have a new bash version
    #

    local args 

    while [ -n "$1" ]; do

        if [ "$1" = "-d" ]; then

            DEBUG=true

        elif [ -z "${args}" ]; then

            args=$1

        else

            args="${args} $1"
        fi

        shift;

    done

    if [ "${args}" = "help" ]; then

        help;
        exit 1

    fi

    setup-sequence ${args};
}

#
# an error will stop the entire script execution and make it exit with a non-zero value
#
function error() {

    echo "[mac-setup error]: $@" 1>&2
    exit 1
}

function debug() {

    ${DEBUG} && echo "${FUNCNAME[1]}(): $@" 1>&2;
}

function info() {

    echo "[mac-setup]: $@" 1>&2;
}

#
# Indempotent
#
function setup-bash-startup-files() {

    debug 

    [ ! -f ~/.bash_profile ] && { echo 'if [ -f ~/.bashrc ]; then . ~/.bashrc; fi' > ~/.bash_profile; info "created .bash_profile"; }

    if [ ! -f ~/.bashrc ]; then

        touch > ~/.bashrc

        #
        # convenience aliases
        #

        echo "alias h='history'" >> ~/.bashrc
        echo "alias cdt='cd ~/tmp'" >> ~/.bashrc

        info "created .bashrc"
    fi
}

#
# Indempotent
#
function generate-ssh-key() {

    debug

    [ -f ~/.ssh/id_rsa ] && return 0

    ssh-keygen -q -b 2048 -P "" -f ~/.ssh/id_rsa -t rsa || error "failed to create SSH key"

    chmod -R go-rwx ~/.ssh

    info "created SSH key"
}

#
# Indempotent
#
function install-shell-tools() {

    local dir=$(dirname $0)
    dir=$(to-absolute-path ${dir})
    add-to-head-of-user-path ${dir}

    #
    # "install" cdw
    #

    if grep "^alias cdw=" ~/.bashrc >/dev/null; then

        debug "cdw already installed"

    else

        info "installing cdw ..."
        echo "alias cdw='. cdwi'" >> ~/.bashrc
    fi
}

#
# Indempotent
#
function create-tmp() {

    if [ ! -d ~/tmp ]; then
        mkdir ~/tmp
        info "created ~/tmp"
    fi
}

#
# Idempotent, if the path exists, won't be added
#
function add-to-head-of-user-path() {

    debug $*

    [ -z "$1" ] && return 0

    #
    # if it is already there, noop
    #

    local regex=${1//\//\\/}

    debug "regex: ${regex}"

    if grep ${regex} ~/.bashrc > /dev/null; then

        debug "$1 already in PATH"
        return 0
    fi

    echo "export PATH=$1:\${PATH}" >> ~/.bashrc

    info "added $1 to the head of user PATH"
    
} 

function post-configuration-report-and-next-steps() {

    if [ "${#POST_INSTALLATION_STEPS[@]}" = "0" ]; then
        echo ""
        echo "There are no post-installation steps."
        echo ""
        return 0;
    fi

    echo ""
    echo "Post-installation steps:"
    echo ""

    local cnt=1

    for i in "${!POST_INSTALLATION_STEPS[@]}"; do
        printf "$((cnt++)). ${POST_INSTALLATION_STEPS[${i}]}"
        echo ""
        echo ""
    done
}

function install-or-update-brew() {

    if brew --version 1>/dev/null 2>&1; then

        info "upgrading brew ..."

        brew update && info "brew updated" || exit 1

        #
        # we don't want to exit, we just want to see the warnings
        #
        brew doctor && info "brew installation verified" || warn "brew doctor detected problems"

    else

        info "installing brew ..."

        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" && \
            info "brew installed" || \
            { error "failed to install brew"; exit 1; }

        info "installing cask ..."

        brew tap caskroom/cask && info "cask installed" || exit 1

        info "running homebrew doctor ..."
        brew doctor info "doctor ok" || exit 1
    fi
}

function install-or-update-bash() {

    info "installing/upgrading bash ..."

    brew install bash && info "bash installed/upgraded ..." || { error "failed to install/upgrade bash"; exit 1; }
}

function install-or-update-gnu-sed() {

    local upgrade=false

    sed --version 2>&1 | grep "GNU sed" > /dev/null 2>&1 && upgrade=true

    local text

    ${upgrade} && text="upgrad" || text="install"

    info "${text}ing GNU sed ..."

    brew install gnu-sed && info "GNU sed ${text}ed" || { error "failed to ${text} GNU sed"; exit 1; }

    #
    # --with-default-names has been removed since Jan 2019, so we need to to this instead:
    #

    add-to-head-of-user-path /usr/local/opt/gnu-sed/libexec/gnubin
}

function install-or-update-gnu-getopt() {

    info "installing/upgrading GNU getopt ..."

    brew install gnu-getopt && info "GNU getopt installed/upgraded" || { error "failed to handle GNU getopt"; exit 1; }

#    #
#    # --with-default-names has been removed since Jan 2019, so we need to to this instead:
#    #
#
#    add-to-head-of-user-path /usr/local/opt/gnu-sed/libexec/gnubin
}


function install-thunderbird() {

    [ -d /Applications/Thunderbird.app ] && { info "Thunderbird already installed"; return 0; }

    info "installing Thunderbird ..."

    brew cask install thunderbird && info "Thunderbird installed ..." || { error "failed to install Thunderbird"; exit 1; }

    POST_INSTALLATION_STEPS["thunderbird"]="Start Thunderbird and configure accounts manually. See https://kb.novaordis.com/index.php/Thunderbird_Configuration#Overview."
}

function install-or-upgrade-iterm2() {

    info "installing iterm2 ..."

    brew cask install iterm2 && info "iterm2 installed" || { error "failed to install iterm2"; exit 1; }

    POST_INSTALLATION_STEPS["iterm2"]="Start iterm2, 'Keep in Dock' and move on the right position in Dock.\n   Then configure: Profiles -> Open Profiles -> Edit Profiles -> Default\n       Colors -> Color Presets -> Light Background\n       Text -> Font -> 12 pt Menlo Regular"
}

function install-or-upgrade-secure-pipes() {

    info "installing secure-pipes ..."

    brew cask install secure-pipes && info "secure-pipes installed" || { error "failed to install secure-pipes"; exit 1; }

    POST_INSTALLATION_STEPS["secure-pipes"]="Configure secure-pipes"
}

function install-or-upgrade-intellij() {

    info "installing IntelliJ IDEA ..."

    brew cask install intellij-idea && info "IntelliJ IDEA installed" || { error "failed to install IntelliJ IDEA"; exit 1; }

    POST_INSTALLATION_STEPS["intellij"]="Configure IntelliJ\n    * Install license\n    * Install the bash plugin"
}

function install-or-upgrade-java() {

    warn ""
    warn ""
    warn " As per July 2019, java8 not available as a brew install anymore - figure this out, maybe use openjdk?"
    warn ""
    warn ""
}

function install-or-upgrade-maven() {

    info "installing maven ..."

    brew install maven && info "maven installed" || { error "failed to install maven"; exit 1; }
}

function install-or-upgrade-git() {

    info "installing git and git-lfs ..."

    brew install git && info "git installed" || { error "failed to install git"; exit 1; }
    brew install git-lfs && info "git-lfs installed" || { error "failed to install git-lfs"; exit 1; }
}

function install-or-upgrade-openoffice() {

    info "installing openoffice ..."

    brew cask install openoffice && info "openoffice installed" || { error "failed to install openoffice"; exit 1; }
}

function install-or-upgrade-chrome() {

    info "installing chrome ..."

    brew cask install google-chrome && info "chrome installed" || { error "failed to install chrome"; exit 1; }
}


main "$@"

