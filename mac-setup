#!/usr/bin/env bash

#
# TODO installed by hand so far:
#
# * Thunderbird: brew cask install thunderbird + find a solution to apply configuration automatically.
# * "Secure Pipes" + configuration
# * James' https://github.com/jwtodd/miscellany/blob/develop/bootstrap.sh + https://kb.novaordis.com/index.php/Brew


DEBUG=false

DEFAULT_FORMULAE=("bash" "git")

function help() {

cat <<EOF

The authoritative source of logic to fully configure a new development Mac or to periodically
update a previously configured Mac. Executing the utility with 'help' displays this.
Theoretically is safe to repeatedly run the utility without any bad side effects, except
updating components to their latest versions.

Usage:

        mac-setup [help]


EOF
}

function setup-sequence() {

    install-or-update-brew;
}

function main() {

    #
    # This code was written to be as portable as possible, so it can be executed by a really old
    # version of bash - at this point we don't know if we have a new bash version
    #

    local command

    while [ -n "$1" ]; do

        if [ "$1" = "-d" ]; then

            DEBUG=true

        elif [ -z "${command}" ]; then

            command=$1
        fi

        shift;

    done

    if [ "${command}" = "help" ]; then

        help;
        exit 1

    elif [ -n "${command}" ]; then

        echo "unknown command \"${command}\"";
        exit 1
    fi

    setup-sequence;
}

function install-or-update-brew() {

    if brew --version 1>/dev/null 2>&1; then

        # upgrade

        echo "upgrading brew ..."

    else

        # new install

        echo "installing brew ..."

    fi


}

#
# internal
#

#
# an error will stop the entire script execution and make it exit with a non-zero value
#
function error() {

    echo "[error]: $@" 1>&2
    exit 1
}

function debug() {

    ${DEBUG} && echo "${FUNCNAME[1]}(): $@" 1<&2;
}

#
# arg1: command (install|update|...). Invoked without any command does an "update"
#
#function brew() {
#
#    #
#    # This code was written to be as portable as possible, so it can be executed by a really old
#    # version of bash - at this point we don't know if we have a new bash version
#    #
#
#    local command=${1:-update}
#
#    debug "command=${command}"
#
#    local exists=false
#
#    /usr/local/bin/brew --version 1>/dev/null && exists=true
#
#    debug "exists=${exists}"
#
#    if [ "${command}" = "install" ]; then
#
#        ${exists} && error "brew already installed"
#
#        debug "installing brew"
#
#        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" || error "fail to install brew"
#
#    elif [ "${command}" = "update" ]; then
#
#        ! ${exists} && error "brew was not installed yet, cannot update ..."
#    else
#
#        error "unknown command ${command}"
#    fi
#}
#
##
## Invoked without any command does an "update"
##
#function bash() {
#
#    #
#    # This code was written to be as portable as possible, so it can be executed by a really old
#    # version of bash - at this point we don't know if we have a new bash version
#    #
#
#    local command=${1:-update}
#
#    debug "${FUNCNAME[O]} ${command}"
#}

main "$@"