#!/usr/bin/env bash

DEBUG=false

DEFAULT_FORMULAE=("bash" "git")

function help() {

cat <<EOF

The authoritative source of logic to fully configure a new development Mac or to periodically
update a previously configured Mac. Executing the utility with 'help' displays this.
Theoretically is safe to repeatedly run the utility without any bad side effects, except
updating components to their latest versions. Most of the utility are installed and updated with
brew and we resort to custom only when brew cannot help.

Usage:

        mac-setup [help]


EOF
}

function setup-sequence() {

    #install-or-update-brew;
    #install-or-update-bash4;
    #install-or-update-gnu-sed;
    install-thunderbird;
}

function main() {

    #
    # This code was written to be as portable as possible, so it can be executed by a really old
    # version of bash - at this point we don't know if we have a new bash version
    #

    local command

    while [ -n "$1" ]; do

        if [ "$1" = "-d" ]; then

            DEBUG=true

        elif [ -z "${command}" ]; then

            command=$1
        fi

        shift;

    done

    if [ "${command}" = "help" ]; then

        help;
        exit 1

    elif [ -n "${command}" ]; then

        echo "unknown command \"${command}\"";
        exit 1
    fi

    setup-sequence;
}

#
# an error will stop the entire script execution and make it exit with a non-zero value
#
function error() {

    echo "[mac-setup error]: $@" 1>&2
    exit 1
}

function debug() {

    ${DEBUG} && echo "${FUNCNAME[1]}(): $@" 1>&2;
}

function info() {

    echo "[mac-setup]: $@" 1>&2;
}

function install-or-update-brew() {

    if brew --version 1>/dev/null 2>&1; then

        info "upgrading brew ..."

        brew update && info "brew updated" || exit 1
        brew doctor && info "brew installation verified" || exit 1

    else

        info "installing brew ..."

        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" && \
            info "brew installed" || \
            { error "failed to install brew"; exit 1; }

        info "installing cask ..."

        brew tap caskroom/cask && info "cask installed" || exit 1

        info "running homebrew doctor ..."
        brew doctor info "doctor ok" || exit 1
    fi
}

function install-or-update-bash4() {

    info "installing/upgrading bash ..."

    brew install bash && info "bash installed/upgraded ..." || { error "failed to install/upgrade bash"; exit 1; }
}

function install-or-update-gnu-sed() {

    local upgrade=false

    sed --version 2>&1 | grep "GNU sed" > /dev/null 2>&1 && upgrade=true

    local text

    ${upgrade} && text="upgrad" || text="install"

    info "${text}ing GNU sed ..."

    brew install gnu-sed --with-default-names && info "GNU sed ${text}ed" || { error "failed to ${text} GNU sed"; exit 1; }
}

function install-thunderbird() {

    [ -d /Applications/Thunderbird.app ] && { info "Thunderbird already installed"; return 0; }

    info "installing Thunderbird ..."

    brew cask install thunderbird && info "Thunderbird installed ..." || { error "failed to install Thunderbird"; exit 1; }
}

main "$@"