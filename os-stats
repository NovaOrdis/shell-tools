#!/bin/bash
#
# A program that runs in the background, reads O/S level statistics in a loop and writes them in a CSV file.
# If the process runs already in the background, attempting to start another one will fail.
#
# The script can  also be used as a command line manager of the process running in the background.
#
# os-stats status|stop
#

sleep_secs=1

function do-stop() {

    local pids=$(background-process-pid)

    [ -z "${pids}" ] && { echo "no os-stats background processes running"; return 0; }

    for i in ${pids}; do
        kill ${i} && \
            echo "stopped background os-stats with pid ${i}" || \
            echo "failed to stop os-stats with pid ${i}" 1>&2
    done
}

function do-status() {

    local pids=$(background-process-pid)

    if [ -z "${pids}" ]; then
         echo "no os-stats background processes running"
    else
         echo "${pids} running"
    fi
}

#
# outputs the pid(s) of all os-stats background processes (those who have 1 as parent)
#
function background-process-pid() {

    IFS="$(printf '\n\r')"
    for line in $(ps -ef | grep os-stats | grep -v grep); do

        local pid=$(echo ${line} | awk '{print $2}')
        local parent_pid=$(echo ${line} | awk '{print $3}')

        if [ "${parent_pid}" = "1" ]; then
            echo ${pid}
        fi
    done
    IFS="$(printf ' \t\n')"
}

function loop-in-background() {

    write-event-to-file header;

    while true; do
        write-event-to-file
        sleep ${sleep_secs}
    done
}

function write-event-to-file() {

    local mode=$1
    local header=false
    [ "${mode}" = "header" ] && header=true

    ${header} && timestamp="time" || timestamp=$(date +'%m/%d/%y %H:%M:%S')
    echo "${timestamp}" >> os-stats.csv
}

#
# command line handling
#
command=""
while [ -n "$1" ]; do
    [ -z "${command}" ] && command=$1
    shift;
done

if [ -n "${command}" ]; then
    do-${command}
    exit 0
fi

pid=$(background-process-pid)
[ -n "${pid}" ] && { echo "an os-stats process already runs in the background (pid ${pid})"; exit 1; }

loop-in-background &



