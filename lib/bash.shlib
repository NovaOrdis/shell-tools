#!/usr/bin/env bash

bash_shlib_version=1.0.2

#
# Generic bash functionality
#

export VERBOSE=false
export HELP=false

#
# The global array that maintains the remaining "non-common" arguments, to be re-set as positional arguments.
#
declare -a ARGS

#
# A function that extracts "common" arguments such as "--verbose", "-v", "help" or "--help" from the command line
# arguments and sets the appropriate global variables, while setting the remaining command line arguments as elements
# of a global array.
#
# Option Handled       Global Variable Set
#
# -v, --verbose        export VERBOSE=true
# -h, --help           export HELP=true
#
# To restore all arguments that have not been processed, as positional arguments, use as as shown below:
#
# process-common-arguments "$@" && set -- "${ARGS[@]}" || { echo "failed to process common arguments" 1>&2; exit 1; }
#
function process-common-arguments() {

    local index=0

    while [[ $# -gt 0 ]]; do

        if [[ $1 = "--verbose" || $1 = "-v" ]]; then

            export VERBOSE=true

        elif [[ $1 = "help" || $1 = "--help" || $1 = "-h" ]]; then

            export HELP=true

        else

            ARGS[${index}]=$1
            ((index++))

        fi

        shift

    done
}

#
# Send the arguments to stderr and exits with a non-zero code (255)
#
function fail() {

    echo [failure]: $@ 1>&2
    exit 255
}

#
# Send error information at stderr, but do not exit and return 0 instead
#
function error {

    echo [error]: $@ 1>&2
    return 0
}

#
# Send a warning at stderr (not to interfere with function returns)
#
function warn {

    echo [warning]: $@ 1>&2
    return 0
}

#
# Send info at stderr (not to interfere with function returns)
#
function info {

    echo $@ 1>&2
    return 0
}

#
# Send debug info at stderr (not to interfere with function returns)
#
# Recommended pattern to debug function calls:
#
#   debug "${FUNCNAME[0]}($@)"
#
function debug() {

    ${VERBOSE} && echo $@ 1>&2
    return 0
}

#
# Creates a temporary directory with a random name (in a designated temporary area of the filesystem, usually /tmp) and
# returns its name. The caller must insure the directory is removed if not useful anymore, otherwise they will
# accumulate.
#
# Usage pattern:
#
#   local tmp_dir
#   tmp_dir=$(get-tmp-dir) || exit 1
#   ...
#
#   rm -r ${tmp_dir} && debug "deleted temporary directory ${tmp_dir}" || warn "failed to delete temporary directory ${tmp_dir}"
#
function get-tmp-dir() {

    debug "${FUNCNAME[0]}($@)"

    local name="/tmp/shell-tools-$(date +'%y%m%d%H%M%S')-${RANDOM}"

    mkdir ${name} || fail "failed to create temporary directory ${name}"

    debug "created temporary directory and returning ${name}"

    echo ${name}
}

#
# Turns a relative path to absolute path, returning the absolute path at stdout.
# If the path is already absolute, the function is a noop. The function does not attempt to validate the path in any
# way.
#
function to-absolute-path() {

    debug "${FUNCNAME[0]}($@)"

    local path=$1
    local abs_path

    [[ -z ${path} ]] && fail "'path' not provided"

    if [[ ${path:0:1} = "/" ]]; then

        abs_path=${path}

    else

        #
        # relative
        #

        abs_path=$(pwd)/${path}
    fi

    debug "absolute path: ${abs_path}"


    #
    # remove trailing /.
    #

    abs_path=${abs_path%/.}
    echo ${abs_path}

}

#
# returns at stdout the major version of the bash running this code
#
# bash 3:
# GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin18)
# Copyright (C) 2007 Free Software Foundation, Inc.
#
function bash-major-version() {

    bash --version | head -n 1 | sed -e 's/^.*version \(.\).*$/\1/'
}

#
# exit with a non-zero exit code if the local bash version is smaller than 4
#
function check-bash-version() {

    local bash_major_version
    bash_major_version=$(bash-major-version)
    debug "bash major version: ${bash_major_version}"
    if [ ${bash_major_version} -lt 4 ]; then echo "[error]: bash 4 or higher is required, please upgrade" 1>&2; exit 1; fi
}