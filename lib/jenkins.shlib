#!/usr/bin/env bash

set -o pipefail

BLUEOCEAN_REST_API_NODE_LIMIT=1000
BLUEOCEAN_REST_API_TEST_LIMIT=100000

#
# Commands and Help
#

function help-pipelines() {
cat << EOF

Display the pipeline names, or their JSON representation if --json is used.

Usage:

    $(basename $0) pipelines [pipeline-type] [--json]

Pipeline types are: simple, folder, multi-branch.

EOF
}

function do-pipelines() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 1
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_type=$1

    if ${json}; then

        get-pipelines ${pipeline_type}
    else

        get-pipeline-names ${pipeline_type}
    fi
}

function help-pipeline() {
cat << EOF

Display the JSON representation of the specified pipeline

Usage:

    $(basename $0) pipeline <pipeline-name>

EOF
}

function do-pipeline() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/ | jq
}

function help-branches() {
cat << EOF

Display the branch names for the specified multi-branch pipeline, or their JSON representation if --json is used.

Usage:

    $(basename $0) branches <pipeline-name> [--json]

EOF
}

function do-branches() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 1
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"

    if ${json}; then

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/ | jq
    else

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/ | jq -r '.[] | .displayName'
    fi
}

function help-branch() {
cat << EOF

Display the JSON representation of the specified branch

Usage:

    $(basename $0) pipeline <pipeline-name> <branch>

EOF
}

function do-branch() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/ | jq
}

function help-runs() {
cat << EOF

Display the run numbers for the specified branch pipeline, or their JSON representation if --json is used.

Usage:

    $(basename $0) runs <pipeline-name> <branch> [--json]

EOF
}

function do-runs() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 2
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"

    if ${json}; then

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/ | jq
    else

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/ | jq -r '.[] | .id'
    fi
}

function help-run() {
cat << EOF

Display the JSON representation of the specified run

Usage:

    $(basename $0) run <pipeline-name> <branch> <run-id>

EOF
}

function do-run() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/ | jq
}

function help-nodes() {
cat << EOF

Display the node IDs for the specified run, or their JSON representation, as a stream of JSON maps, if --json is used.

Usage:

    $(basename $0) nodes <pipeline-name> <branch> <run-id> [--json]

EOF
}

function do-nodes() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 3
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"

    if ${json}; then

        get-nodes ${pipeline_name} ${branch} ${run_id}
    else

        get-nodes ${pipeline_name} ${branch} ${run_id} | jq -r '.id'
    fi
}

function help-node() {
cat << EOF

Display the JSON representation of the specified node.

Usage:

    $(basename $0) pipeline <pipeline-name> <branch> <run-id> <node-id|node-name>

If the node name contains spaces, it must be quoted.

EOF
}

function do-node() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"
    local node_id_or_name=$4
    [[ -z ${node_id_or_name} ]] && fail "node ID or name not provided"

    local node_id
    node_id=$(node-name-to-node-id "${node_id_or_name}" "${pipeline_name}" "${branch}" ${run_id}) || \
        fail "node \"${node_id_or_name}\" cannot be found in run ${pipeline_name}:${branch}#${run_id}"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/${node_id}/ | jq
}

function help-log() {
cat << EOF

Pull the log for the specified node and send it to stdout.

Usage:

    $(basename $0) log <pipeline-name> <branch> <run-id> <node-id|node-name>

If the node name contains spaces, it must be quoted.

EOF
}

function do-log() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"
    local node_id_or_name=$4
    [[ -z ${node_id_or_name} ]] && fail "node ID or name not provided"

    local node_id
    node_id=$(node-name-to-node-id "${node_id_or_name}" "${pipeline_name}" "${branch}" ${run_id}) || \
        fail "node \"${node_id_or_name}\" cannot be found in run ${pipeline_name}:${branch}#${run_id}"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/${node_id}/log/?start=0
}

function help-test-summary() {
cat << EOF

Return the test summary for a run.

Usage:

    $(basename $0) test-summary <pipeline-name> <branch> <run-id>

Display the following information:
- Total number of tests
- Number of passed tests
- Number of skipped tests
- Number of failed tests
- Number of fixed tests since the last run
- Number of regressions since the last run
- "Existing failed"

EOF
}

function do-test-summary() {

    debug "${FUNCNAME[0]}($@)"

    [[ -z ${JENKINS_TMP_DIR} ]] && fail "'JENKINS_TMP_DIR' not set in context"
    [[ ! -d ${JENKINS_TMP_DIR}  ]] && fail "JENKINS_TMP_DIR does not exist: ${JENKINS_TMP_DIR}"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"

    local result_file=${JENKINS_TMP_DIR}/$(get-tmp-file-name test-summary)

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/blueTestSummary/ > ${result_file} || exit 1

cat <<EOF

    Total tests:                $(jq -r '.total' ${result_file})
    Passed:                     $(jq -r '.passed' ${result_file})
    Skipped:                    $(jq -r '.skipped' ${result_file})
    Failed:                     $(jq -r '.failed' ${result_file})
    Fixed since last run:       $(jq -r '.fixed' ${result_file})
    Regressions since last run: $(jq -r '.regressions' ${result_file})
    Existing failed:            $(jq -r '.existingFailed' ${result_file})

EOF
}

function help-tests() {
cat << EOF

Return the JSON representation for all tests of a run. The result is a JSON map stream. The total number of JSON maps
is equal with the total number of tests reported by "test-summary", and the amount of data might be quite large. The
number of returned test representation returned is limited to ${BLUEOCEAN_REST_API_TEST_LIMIT}.

Usage:

    $(basename $0) tests <pipeline-name> <branch> <run-id>

EOF
}

function do-tests() {

    debug "${FUNCNAME[0]}($@)"

    [[ -z ${JENKINS_TMP_DIR} ]] && fail "'JENKINS_TMP_DIR' not set in context"
    [[ ! -d ${JENKINS_TMP_DIR}  ]] && fail "JENKINS_TMP_DIR does not exist: ${JENKINS_TMP_DIR}"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"

    local result_file=${JENKINS_TMP_DIR}/$(get-tmp-file-name tests)

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/tests/ 0 ${BLUEOCEAN_REST_API_TEST_LIMIT} > ${result_file} || exit 1

    jq '.[]' ${result_file}
}

#
# END of Commands and Help
#

#
# Set the global variables JENKINS_BASE_UR, JENKINS_BASE64_AUTH, JENKINS_TMP_DIR and initializes the global context
# by creating temporary directory, etc.
#
function initialize-global-context() {

    debug "${FUNCNAME[0]}($@)"

    local host_url=$1
    local username=$2
    local password=$3
    local instance_name=$4
    local preserve_tmp_dir=${5:-false}

    [[ -z ${host_url} ]] && fail "'host_url' not provided"
    [[ -z ${username} ]] && fail "'username' not provided"
    [[ -z ${password} ]] && fail "'password' not provided"
    [[ -z ${instance_name} ]] && fail "'instance_name' not provided"

    JENKINS_BASE_URL=${host_url}/${instance_name}/blue/rest/organizations/jenkins
    JENKINS_BASE64_AUTH=$(echo -n "${username}:${password}" | base64)

    JENKINS_TMP_DIR=$(get-tmp-dir) || exit 1

    if ${preserve_tmp_dir}; then
        debug "temporary directory ${JENKINS_TMP_DIR} will be preserved on exit"
    else
        trap "rm -rf ${JENKINS_TMP_DIR} && debug deleted temporary directory ${JENKINS_TMP_DIR} || warn failed to delete temporary directory ${JENKINS_TMP_DIR}" EXIT && \
        debug "registered temporary directory ${JENKINS_TMP_DIR} cleanup procedure"
    fi

    debug "JENKINS_BASE_URL: ${JENKINS_BASE_URL}"
    debug "JENKINS_BASE64_AUTH: ${JENKINS_BASE64_AUTH}"
    debug "JENKINS_TMP_DIR: ${JENKINS_TMP_DIR}"
}

#
# The function expects JENKINS_BASE_URL, JENKINS_BASE64_AUTH and JENKINS_TMP_DIR to be set in the context.
#
# It expects the relative URL with all encoding issues resolved (for example, the branch must not contain slashes,
# but the corresponding translated character).
#
# Optionally it accepts a start and a limit for the number of records. The default Blue Ocean behavior is to start
# from record 0 and return 100 records (for nodes at least)
#
function blue-ocean-rest-get() {

    debug "${FUNCNAME[0]}($@)"

    [[ -z ${JENKINS_BASE_URL} ]] && fail "'JENKINS_BASE_URL' not set in context"
    [[ -z ${JENKINS_BASE64_AUTH} ]] && fail "'JENKINS_BASE64_AUTH' not set in context"
    [[ -z ${JENKINS_TMP_DIR} ]] && fail "'JENKINS_TMP_DIR' not set in context"
    [[ ! -d ${JENKINS_TMP_DIR}  ]] && fail "JENKINS_TMP_DIR does not exist: ${JENKINS_TMP_DIR}"

    local relative_url=$1
    [[ -z ${relative_url} ]] && fail "'relative_url' not provided"
    local start=$2 # optional, default is 0
    local limit=$3 # optional, Blue Ocean built-in default is 100

    local url=${JENKINS_BASE_URL}/${relative_url}
    local more_than_one=false
    [[ -n ${start} || -n ${limit} ]] && url="${url}?"
    if [[ -n ${start} ]]; then
        url="${url}start=${start}"
        more_than_one=true
    fi
    if [[ -n ${limit} ]]; then
        ${more_than_one} && url="${url}&"
        url="${url}limit=${limit}"
        more_than_one=true
    fi

    local output_file=${JENKINS_TMP_DIR}/$(get-tmp-file-name "blueocean")

    debug curl -s -H "Authorization: Basic ***" ${url}
    curl -s -H "Authorization: Basic ${JENKINS_BASE64_AUTH}" ${url} > ${output_file}

    # commented out because the server response is large, though it does not have multiple lines. Should improve
    # debug file to also limit based on size (characters) not only lines.
    # debug "server response:"
    # debug-file ${output_file} 100

    debug "parsing Blue Ocean server output ${output_file}"
    local error_message

    #
    # Blue Ocean reacts differently to an unknown pipeline or run ID (produces JSON content) than to unknown branch
    # (produces HTML). First try to interpret as HTML
    #
    if grep -q "^ *<html>" ${output_file}; then

        debug "Blue Ocean server output is HTML"

        if grep -i -q "error 404" ${output_file}; then
            #
            # one of the resources specified by the URL does not exist
            #
            fail "one of the resources specified in the URL does not exist: ${relative_url}"
        else
            debug "output file: ${output_file}"
            error "${relative_url} produced unknown HTML format"
            cat ${output_file} 1>&2
            fail "exiting"
        fi
    fi

    debug "interpreting Blue Ocean server output as JSON"

    error_message=$(jq -r 'select(.code == 404) | .message' ${output_file} 2>/dev/null)
    [[ -n ${error_message} ]] && fail ${error_message} || debug "server output NOT a code 404 response"

    cat ${output_file}
}

#
# Return pipelines as JSON array. The output can be piped into jq.
#
# The pipeline type (simple, folder, multi-branch) can be optionally specified as the first argument.
#
# The function expects JENKINS_BASE_URL and JENKINS_BASE64_AUTH to be set in the context.
#
function get-pipelines() {

    debug "${FUNCNAME[0]}($@)"

    local type=$1 # Optional, can be 'simple', 'folder', 'multi-branch'

    local select_expression=true
    if [[ -n ${type} ]]; then
        class=$(pipeline-type-to-class ${type}) || fail "unknown pipeline type: ${type}"
        select_expression='._class=="'${class}'"'
    fi
    debug "select expression: ${select_expression}"

    blue-ocean-rest-get pipelines/ | jq -r '[.[] | select('${select_expression}')]'
}

#
# Return pipeline names, as a space separated list. The pipeline type (simple, folder, multi-branch) can be optionally
# specified as the third argument. If the pipeline type is specified, only the names of the pipelines with the given
# typed are returned. Function will fail on invalid pipeline type. Return 1 on empty pipeline list.
#
# The function expects JENKINS_BASE_URL and JENKINS_BASE64_AUTH to be set in the context.
#
function get-pipeline-names() {

    debug "${FUNCNAME[0]}($@)"

    local type=$1 # Optional, can be 'simple', 'folder', 'multi-branch'

    local select_expression=true
    if [[ -n ${type} ]]; then
        class=$(pipeline-type-to-class ${type}) || fail "unknown pipeline type: ${type}"
        select_expression='._class=="'${class}'"'
    fi
    debug "select_expression: ${select_expression}"

    get-pipelines | jq -r '.[] | select('${select_expression}') | .name'
}

#
# Converts a known pipeline type ('simple', 'folder', 'multi-branch' to an Blue Ocean pipeline class.
# For known pipeline types, send the class at stdout and return zero.
# For an unknown pipeline type, return a non-zero exit code.
#
function pipeline-type-to-class() {

    debug "${FUNCNAME[0]}($@)"

    local type=$1
    [[ -z ${type} ]] && fail "'type' not provided"

    [[ ${type} = "simple" ]] && { echo "io.jenkins.blueocean.rest.impl.pipeline.PipelineImpl"; return 0; }
    [[ ${type} = "folder" ]] && { echo "io.jenkins.blueocean.service.embedded.rest.PipelineFolderImpl"; return 0; }
    [[ ${type} = "multi-branch" ]] && { echo "io.jenkins.blueocean.rest.impl.pipeline.MultiBranchPipelineImpl"; return 0; }

    return 1
}

#
# Encode characters such as "/" to make them compatible with Jenkins REST URLs.
#
function encode-to-rest-url() {

    debug "${FUNCNAME[0]}($@)"

    local arg=$1
    [[ -z ${arg} ]] && return 0

    local result=${arg//\//%252F}
    [[ ${arg} != ${result} ]] && debug "${arg} → ${result}"
    echo "${result}"
}

#
# If the argument is already a node ID, verify if it is valid and leave it unchanged. If the argument is a node name
# convert it to node ID, if the node name is valid. Send the result to stdout and return 0 on successful operation
# (including if the argument is already a node ID and the conversion was a noop). Return a non-zero code if the name
# cannot be converted to a node ID.
#
function node-name-to-node-id() {

    debug "${FUNCNAME[0]}($@)"

    local node_name_or_id=$1
    local pipeline_name=$2
    local branch=$3
    local run_id=$4

    [[ -z ${node_name_or_id} ]] && fail "'node_name_or_id' not provided"
    [[ -z ${pipeline_name} ]] && fail "'pipeline_name' not provided"
    [[ -z ${branch} ]] && fail "'branch' not provided"
    [[ -z ${run_id} ]] && fail "'run_id' not provided"

    if [[ ${node_name_or_id// /} != ${node_name_or_id} ]]; then

        debug "an ID cannot contains spaces, so \"${node_name_or_id}\" cannot be an ID"
    else
        #
        # argument does not contain spaces, it could be an ID, assume it is node ID and attempt to locate the
        # corresponding resource
        #
        local json
        local node_url="pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/${node_name_or_id}/"
        json=$(blue-ocean-rest-get ${node_url}) || { debug "failed to get REST resource for ${node_url}"; return 1; }
        debug ${json}

        if ! echo ${json} | jq -r '.id' >/dev/null 2>&1; then

            debug "the REST layer did not return a valid JSON, the node resource was not found"
        else

            local node_id
            node_id=$(echo ${json} | jq -r '.id')
            debug "node_name_or_id: ${node_name_or_id}, node_id: ${node_id}"
            #
            # if the node with this node ID exists, we return the same node ID here
            #
            if [[ ${node_name_or_id} = ${node_id} ]]; then
                debug "argument is already a node ID: ${node_id}"
                echo ${node_id}
                return 0
            fi
            if [[ -n ${node_id} && ${node_id} != ${node_name_or_id} ]]; then
                fail "invalid state, a query for node ID ${node_name_or_id} returned a resource with a different node ID: ${node_id}"
            fi
            debug "node resource for ID ${node_name_or_id} not found, attempting to resolve it as a name"
        fi
    fi

    #
    # query the run and look for the node with the given name
    #
    local node_id
    node_id=$(blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/ | jq -r '.[] | select(.displayName=="'"${node_name_or_id}"'") | .id')
    debug "node_id: ${node_id}"

    [[ -z ${node_id} ]] && return 1
    echo ${node_id}
}

#
# Return the JSON representation for all nodes associated with the given run, as a stream of maps.
#
function get-nodes() {

    debug "${FUNCNAME[0]}($@)"

    [[ -z ${JENKINS_TMP_DIR} ]] && fail "'JENKINS_TMP_DIR' not set in context"
    [[ ! -d ${JENKINS_TMP_DIR}  ]] && fail "JENKINS_TMP_DIR does not exist: ${JENKINS_TMP_DIR}"

    local pipeline_name=$1
    local branch=$2
    local run_id=$3

    [[ -z ${pipeline_name} ]] && fail "'pipeline_name' not provided"
    [[ -z ${branch} ]] && fail "'branch' not provided"
    [[ -z ${run_id} ]] && fail "'run_id' not provided"

    local output_file=${JENKINS_TMP_DIR}/blue-ocean-rest-get-output

    blue-ocean-rest-get \
        pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/ \
        0 ${BLUEOCEAN_REST_API_NODE_LIMIT} > ${output_file}

    jq '.[]' ${output_file} || fail "failed to apply array-to-iterator .[] filter on Blue Ocean JSON output ${output_file}"
}