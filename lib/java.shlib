#!/usr/bin/env bash

JAVA_SHLIB_VERSION=0.2.0

#
# Functionality related to building and running Java. This collection of function requires that bash.shlib was
# sourced already. The library contains code (below) that insures that, by looking for the existence of the function
# debug()
#

typeset -F | grep "declare -f debug" > /dev/null 2>&1 || { echo "[failure]: java.shlib: bash.shlib was not sourced and we need it to work correctly" 1>&2; exit 1; }

#
# Return 0 is the JAR exists, contains a valid MANIFEST.MF with a Main-Class: entry, and the corresponding Main-Class
# exits in the JAR. Note that the argument may be an entire classpath.
#
function is-executable-jar() {

    debug "${FUNCNAME[0]}($*)"

    local jar_file=$1

    [[ -z ${jar_file} ]] && fail "'jar_file' not provided"

    if echo ${jar_file} | grep -q ":"; then
        debug "classpath provided"
        return 1
    fi

    local jar_file_abs_path
    jar_file_abs_path=$(to-absolute-path ${jar_file}) || exit 1

    [[ -f ${jar_file_abs_path} ]] || { error "no such file: ${jar_file_abs_path}"; return 1; }

    local tmp_dir
    tmp_dir=$(get-tmp-dir) || exit 1

    (cd ${tmp_dir}; jar xf ${jar_file_abs_path} META-INF/MANIFEST.MF) || fail "failed to extract META-INF/MANIFEST.MF from ${jar_file_abs_path}"

    local manifest=${tmp_dir}/META-INF/MANIFEST.MF
    local return_code=1

    if [[ ! -f ${manifest} ]]; then

        debug "no META-INF/MANIFEST.MF manifest file found"

    else

        debug " META-INF/MANIFEST.MF manifest file found"

        local main_class
        main_class=$(cat ${manifest} | grep "Main-Class:" | sed -e 's/^.*: //') || fail "failed to extract Main-Class from ${manifest}"

        if [[ -z ${main_class} ]]; then
            debug "no 'Main-Class:' found in ${manifest}"
        else
            debug "main_class: ${main_class}"
            return_code=0
        fi
    fi

    #
    # cleanup
    #

    rm -r ${tmp_dir} && debug "deleted temporary directory ${tmp_dir}" || warn "failed to delete temporary directory ${tmp_dir}"

    return ${return_code}
}

#
# Select and return at stdout JAVA_HOME for a locally installed Java that matches the specified vendor and version.
# The version is specified as a bash matching pattern (https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)
# If more than one match is found, the function will fail.
#
# Supported vendors: Amazon
# Version matching pattern examples: 1.8, 1.8*, 1.8.0_221, 11.
#
# The function works both on MacOS (where it inspects the Java installations in /Library/Java/JavaVirtualMachines) and
# Linux, where it uses the alternatives utility to browse and select available Java installations.
#
function select-java-home() {

  local java_version=$1
  local java_vendor=$2
  [[ -z ${java_version} ]] && { echo "${FUNCNAME[0]}: Java version not provided" 1>&2; exit 1; }
  [[ -z ${java_vendor} ]] && { echo "${FUNCNAME[0]}: Java vendor not provided" 1>&2; exit 1; }
  local javas java_home candidate source

  if is_macOS; then
    #
    # on MacOS we list /Library/Java/JavaVirtualMachines content
    #
    local MACOS_JAVA_LIBRARY_DIR=${MACOS_JAVA_LIBRARY_DIR:-/Library/Java/JavaVirtualMachines}
    local MACOS_JAVA_HOME_POSTFIX=${MACOS_JAVA_HOME_POSTFIX:-Contents/Home}
    local vendor_prefix=${java_vendor}

    [[ -d ${MACOS_JAVA_LIBRARY_DIR} ]] || { echo "[error]: MacOS Java library directory not valid: ${MACOS_JAVA_LIBRARY_DIR}" 1>&2; exit 1; }

    if [[ ${java_vendor} =~ [a|A]mazon ]]; then
      vendor_prefix=amazon-corretto-
    fi

    javas=$(ls -d ${MACOS_JAVA_LIBRARY_DIR}/${vendor_prefix}* 2>/dev/null) || { echo "[error]: no ${java_vendor} Java found in ${MACOS_JAVA_LIBRARY_DIR}" 1>&2; exit 1; }
    for i in ${javas}; do
      i=${i#${MACOS_JAVA_LIBRARY_DIR}/${vendor_prefix}}
      i=${i%.jdk}
      if [[ ${i} =~ ${java_version} ]]; then
        candidate=${MACOS_JAVA_LIBRARY_DIR}/${vendor_prefix}${i}.jdk/${MACOS_JAVA_HOME_POSTFIX}
        [[ -n ${java_home} ]] && { echo "[error]: more than one ${java_vendor} Java installation matches version ${java_version}: ${java_home}, ${candidate}; specify version more precisely" 1>&2; exit 1; }
        java_home=${candidate}
      fi
    done
    source="in ${MACOS_JAVA_LIBRARY_DIR}"
  else
    #
    # for Linux we query alternatives
    #
    (alternatives --version 1>/dev/null 2>&1) || { echo "alternatives utility failed or it is not available on the system"; exit 2; }

    local vendor_suffix=${java_vendor}
    if [[ ${java_vendor} =~ [a|A]mazon ]]; then
      vendor_suffix=amazon-corretto
    fi

    javas=$(alternatives --display java 2>/dev/null | grep "priority" | grep "${vendor_suffix}" | sed -e 's/ .*//')
    [[ -z ${javas} ]] && { echo "[error]: no Java installations returned by alternatives"; exit 2; }

    local version
    for i in ${javas}; do
      version=${i/${vendor_suffix}*/}
      version=${version%-}
      version=${version##*-}
      if [[ ${version} =~ ${java_version} ]]; then
        candidate=${i%/bin/java}
        [[ -n ${java_home} ]] && { echo "[error]: more than one ${java_vendor} Java installation matches version ${java_version}: ${java_home}, ${candidate}; specify version more precisely" 1>&2; exit 1; }
        java_home=${candidate}
      fi
    done
    source="by running the alternatives utility"
  fi
  [[ -z ${java_home} ]] && { echo "[error]: no ${java_vendor} ${java_version} Java found ${source}" 1>&2; exit 1; }
  [[ -d ${java_home} ]] || { echo "[error]: selected ${java_vendor} ${java_version} Java but JAVA_HOME does not seem to be a valid directory: ${java_home}" 1>&2; exit 1; }
  echo "${java_home}"
}
