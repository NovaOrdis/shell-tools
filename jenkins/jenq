#!/usr/bin/env bash

for i in bash.shlib jenkins.shlib; do [ -f $(dirname $0)/../lib/${i} ] && source $(dirname $0)/../lib/${i} || { echo "[error]: $(dirname $0)/../lib/${i} not found" 1>&2; exit 1; } done

VERSION=0.1.0
# The Jenkins base URL (https://<host>/<instance-name>/blue/rest/organizations/jenkins). Must not end with slash.
JENKINS_BASE_URL=UNINITIALIZED
JENKINS_BASE64_AUTH=UNINITIALIZED

function usage() {
cat <<EOF

Jenkins instance query tool.

    $(basename $0) [common-options] <command> [command-options]

Common Options:

    --host-url specifies the URL of the Jenkins instance host (ex: https://jenkins.example.com). The same value can
        be provided with JENKINS_HOST_URL environment variable. If both the environment variable and command line
        options are provided, command line value takes precedence.

    --username specifies the user name to authenticated against the Jenkins instance. The same value can be provided
        with JENKINS_USERNAME environment variable. If both the environment variable and command line options are
        provided, command line value takes precedence.

    --password specifies the password to use to authenticated against the Jenkins instance. The same value can be
        provided with JENKINS_PASSWORD environment variable. If both the environment variable and command line options
        are provided, command line value takes precedence.

    --instance-name specifies the name of the Jenkins instance (ex: release).  The same value can be provided with
        JENKINS_INSTANCE_NAME environment variable. If both the environment variable and command line options are
        provided, command line value takes precedence.

Commands:

    pipelines - return pipelines, optionally filtered by pipeline type.

    pipeline - display a specific pipeline information.

    branches - return branches for a multi-branch pipeline.

    branch - display a specific branch information.

    runs - return runs for a branch.

    run - display a specific run information.

    nodes - return nodes for a run

    node - display a specific node information.

    log - pull the execution log for a node.

Individual command help can be obtained with:

     $(basename $0) help <command>

EOF
}

function main() {

    process-common-arguments "$@" && set -- "${ARGS[@]}" || { echo "failed to process common arguments" 1>&2; exit 1; }

    if ${HELP}; then
        [[ -n $1 ]] && { help-$1; exit 0; }
        usage; exit 0;
    fi

    [[ -z $1 ]] && { usage; exit 0; }

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--host-url"]="string"
    OPTIONS["--username"]="string"
    OPTIONS["--password"]="string"
    OPTIONS["--instance-name"]="string"
    process-options "$@"

    local host_url=${OPTIONS["--host-url"]:-${JENKINS_HOST_URL}}
    [[ -z ${host_url} ]] && fail "Jenkins host URL not provided; use --host-url command line option or set JENKINS_HOST_URL environment variable"
    local username=${OPTIONS["--username"]:-${JENKINS_USERNAME}}
    [[ -z ${username} ]] && fail "Jenkins user name not provided; use --username command line option or set JENKINS_USERNAME environment variable"
    local password=${OPTIONS["--password"]:-${JENKINS_PASSWORD}}
    [[ -z ${password} ]] && fail "Jenkins password not provided; use --password command line option or set JENKINS_PASSWORD environment variable"
    local instance_name=${OPTIONS["--instance-name"]:-${JENKINS_INSTANCE_NAME}}
    [[ -z ${instance_name} ]] && fail "Jenkins instance name not provided; use --instance-name command line option or set JENKINS_INSTANCE_NAME environment variable"

    JENKINS_BASE_URL=${host_url}/${instance_name}/blue/rest/organizations/jenkins
    JENKINS_BASE64_AUTH=$(echo -n "${username}:${password}" | base64)
    debug "JENKINS_BASE_URL: ${JENKINS_BASE_URL}"
    debug "JENKINS_BASE64_AUTH: ${JENKINS_BASE64_AUTH}"

    local command=$1

    shift

    do-${command} "$@"
}

function help-pipelines() {
cat << EOF

Display the pipeline names, or their JSON representation if --json is used.

Usage:

    $(basename $0) pipelines [pipeline-type] [--json]

Pipeline types are: simple, folder, multi-branch.

EOF
}

function do-pipelines() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 1
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_type=$1

    if ${json}; then

        get-pipelines ${pipeline_type}
    else

        get-pipeline-names ${pipeline_type}
    fi
}

function help-pipeline() {
cat << EOF

Display the JSON representation of the specified pipeline

Usage:

    $(basename $0) pipeline <pipeline-name>

EOF
}

function do-pipeline() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/ | jq
}

function help-branches() {
cat << EOF

Display the branch names for the specified multi-branch pipeline, or their JSON representation if --json is used.

Usage:

    $(basename $0) branches <pipeline-name> [--json]

EOF
}

function do-branches() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 1
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"

    if ${json}; then

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/ | jq
    else

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/ | jq -r '.[] | .displayName'
    fi
}

function help-branch() {
cat << EOF

Display the JSON representation of the specified branch

Usage:

    $(basename $0) pipeline <pipeline-name> <branch>

EOF
}

function do-branch() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/ | jq
}

function help-runs() {
cat << EOF

Display the run numbers for the specified branch pipeline, or their JSON representation if --json is used.

Usage:

    $(basename $0) runs <pipeline-name> <branch> [--json]

EOF
}

function do-runs() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 2
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"

    if ${json}; then

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/ | jq
    else

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/ | jq -r '.[] | .id'
    fi
}

function help-run() {
cat << EOF

Display the JSON representation of the specified run

Usage:

    $(basename $0) pipeline <pipeline-name> <branch> <run-id>

EOF
}

function do-run() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/ | jq
}

function help-nodes() {
cat << EOF

Display the node IDs for the specified run, or their JSON representation if --json is used.

Usage:

    $(basename $0) runs <pipeline-name> <branch> <run-id> [--json]

EOF
}

function do-nodes() {

    debug "${FUNCNAME[0]}($@)"

    unset ARGS; declare -a ARGS
    declare -A OPTIONS
    OPTIONS["--json"]="boolean"
    process-options "$@"
    fail-on-unknown-arguments 3
    set -- "${ARGS[@]}"
    local json=${OPTIONS["--json"]}

    pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"

    if ${json}; then

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/ | jq
    else

        blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/ | jq -r '.[] | .id'
    fi
}

function help-node() {
cat << EOF

Display the JSON representation of the specified node.

Usage:

    $(basename $0) pipeline <pipeline-name> <branch> <run-id> <node-id>

EOF
}

function do-node() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"
    local node_id=$4
    [[ -z ${node_id} ]] && fail "node ID not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/${node_id}/ | jq
}

function help-log() {
cat << EOF

Pull the log for the specified node and send it to stdout.

Usage:

    $(basename $0) log <pipeline-name> <branch> <run-id> <node-id>

EOF
}

function do-log() {

    debug "${FUNCNAME[0]}($@)"

    local pipeline_name=$1
    [[ -z ${pipeline_name} ]] && fail "pipeline name not provided"
    local branch=$2
    [[ -z ${branch} ]] && fail "branch not provided"
    local run_id=$3
    [[ -z ${run_id} ]] && fail "run ID not provided"
    local node_id=$4
    [[ -z ${node_id} ]] && fail "node ID not provided"

    blue-ocean-rest-get pipelines/${pipeline_name}/branches/$(encode-to-rest-url ${branch})/runs/${run_id}/nodes/${node_id}/log/?start=0
}

main "$@"