#!/usr/bin/env bash

ld=/Users/ovidiu/projects/shell-tools/lib
for i in bash.shlib jenkins.shlib; do [ -f ${ld}/${i} ] && source ${ld}/${i} || { echo "[error]: ${ld}/${i} not found" 1>&2; exit 1; } done

PIPELINE_NAME=c3server-k8s
BRANCH=epic/cloud/team/k8sonly/develop

function usage() {
cat <<EOF

Collect logs for ${PIPELINE_NAME} pipeline runs on branch ${BRANCH}.
The run number must be specified as argument.

Usage:

    $(basename $0) <build-number>

The logs are collected in the current directory.

EOF
}
function main() {

    process-common-arguments "$@" && set -- "${ARGS[@]}" || { echo "failed to process common arguments" 1>&2; exit 1; }

    ${HELP} || [[ -z $1 ]] && { usage; exit 0; }

    local run_id=$1
    local pipeline=${PIPELINE_NAME}
    local branch=${BRANCH}

    local target_dir_parent=$(pwd)
    local target_dir_name="${branch//\//_}#${run_id}"
    local target_dir=${target_dir_parent}/${target_dir_name}
    [[ ! -d ${target_dir} ]] && { mkdir -p ${target_dir} && info "created ${target_dir}"; }

    local jenq=$(dirname $0)/jenq

    for node_id in $(${jenq} nodes ${pipeline} ${branch} ${run_id}); do

        debug "node_id: ${node_id}"

        #
        # TODO: querying again for name is inefficient, we can pull the JSON representation of all nodes in the outer loop
        #
        local node_name
        node_name=$(${jenq} node ${pipeline} ${branch} ${run_id} ${node_id} | jq -r '.displayName') || \
            fail "failed to read name for node ${node_id}"
        debug "node name: ${node_name}"

#        if [[ ${name} = "Testing" || ${name} = "parallel-synthetic-Parallel" || ${name} = "Server Testing Branch" || ${name} =~ apps ]]; then
#            info "skipping logs for node \"${name}\""
#            continue
#        fi

        local target_file=${target_dir}/${node_id}-${node_name// /_}.log
        ${jenq} log ${pipeline} ${branch} ${run_id} ${node_id} log > ${target_file}
        info "collected logs for node ${node_name} in $(basename ${target_file})"
    done
}

main "$@"