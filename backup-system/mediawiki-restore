#!/usr/bin/env bash

[[ -f $(dirname "$0")/../lib/bash.shlib ]] && . $(dirname $0)/../lib/bash.shlib || { echo "$(dirname $0)/../lib/bash.shlib not found" 1>&2; exit 1; }
[[ -f $(dirname "$0")/mediawiki.shlib ]] && . $(dirname "$0")/mediawiki.shlib || { echo "$(dirname "$0")/mediawiki.shlib not found" 1>&2; exit 1; }

VERSION=0.1.0

function usage() {

cat <<EOF

$(basename $0) is a tool to restore a mediawiki instance (database content, files, extensions, configuration and
everything is needed to fully restore the instance) from a backup file created by mediawiki-backup script.
$(basename $0) reads the backup file and restores the state of the old instance, given a new pre-installed but empty
new instance.

The script will interactively request the MySQL root account password.

Usage:

  $(basename $0) <backup-file> <mediawiki-installation-dir>

Arguments:

  <backup-file> is the backup file produced by the peer mediawiki-backup script.

  <mediawiki-installation-dir> is the local file system directory where the mediawiki instance to restore state into
    is installed (by default /var/www/mediawiki-<version>).

Options:

 -p|--preserve-tmp Optional boolean flag that instructs the program to preserve the temporary directory.

EOF
}

function main() {

  process-common-arguments "$@" && set -- "${ARGS[@]}" || fail "failed to process common arguments"

  ${HELP} || [[ -z $1 ]] && { usage; exit 0; }

  unset ARGS
  declare -a ARGS
  declare -A OPTIONS
  OPTIONS["--preserve-tmp"]="boolean -p"
  process-options "$@"
  fail-on-unknown-arguments 2

  local tmp_dir
  tmp_dir=$(get-tmp-dir) || exit 1
  trap "mediawiki-cleanup ${tmp_dir} ${OPTIONS[--preserve-tmp]}" EXIT

  restore-mediawiki "${ARGS[0]}" "${ARGS[1]}" "${tmp_dir}"
}

function restore-mediawiki() {

  debug "${FUNCNAME[0]}($*)"
  local backup_file=$1
  local target_mediawiki_dir=$2
  local tmp_dir=$3

  debug "backup_file: ${backup_file}"
  debug "target_mediawiki_dir: ${target_mediawiki_dir}"
  debug "tmp_dir: ${tmp_dir}"

  ensure-root
  ensure-valid-mediawiki-dir "${target_mediawiki_dir}"

  local database_root_password
  database_root_password=$(read-database-root-password)

  local backup_dir dropped_skins_SEPARATOR_dropped_extensions
  backup_dir=$(expand-backup "${backup_file}" "${tmp_dir}") || exit 1
  debug "backup_dir: ${backup_dir}"
  restore-database "${backup_dir}" "${database_root_password}"
  dropped_skins_SEPARATOR_dropped_extensions=$(restore-local-settings "${backup_dir}" "${target_mediawiki_dir}") || exit 1
  restore-image-files "${backup_dir}" "${target_mediawiki_dir}"
  restore-certificates-and-keys "${backup_dir}"
  manual-post-install-warning "${backup_dir}" "${target_mediawiki_dir}" "${dropped_skins_SEPARATOR_dropped_extensions}"
}

#
# Expand the backup file and ensure it is a valid mediawiki backup.
# Return the backup directory at stdout.
#
function expand-backup() {

  debug "${FUNCNAME[0]}($*)"

  local backup_file=$1
  local tmp_dir=$2
  [[ -f ${backup_file} ]] || fail "no such backup file: ${backup_file}"
  info "extracting backup from ${backup_file} ..."
  tar xfz ${backup_file} -C ${tmp_dir} || fail "failed to extract backup file ${backup_file} in ${tmp_dir}"
  local backup_dir_name
  backup_dir_name=$(ls ${tmp_dir})
  local backup_dir=${tmp_dir}/${backup_dir_name}
  [[ -d ${backup_dir} ]] || fail "the backed up content directory does not exist: ${backup_dir}"
  echo ${backup_dir}
}

function restore-database() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_root_password=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -d ${backup_dir} ]] || fail "no such backup directory: ${backup_dir}"
  [[ -z ${database_root_password} ]] && fail "'database_root_password' not provided"

  local source_mediawiki_dir source_local_settings_file database_host database_user database_password database_name
  source_mediawiki_dir=$(backup-dir-to-mediawiki-dir "${backup_dir}")
  local source_local_settings_file=${source_mediawiki_dir}/LocalSettings.php
  [[ -f ${source_local_settings_file} ]] || fail "no LocalSettings.php found in ${source_mediawiki_dir}"

  database_host=$(get-php-defined-value "${source_local_settings_file}" wgDBserver) || exit 1
  database_user=$(get-php-defined-value "${source_local_settings_file}" wgDBuser) || exit 1
  database_password=$(get-php-defined-value "${source_local_settings_file}" wgDBpassword) || exit 1
  database_name=$(get-php-defined-value "${source_local_settings_file}" wgDBname) || exit 1

  debug "database_host: ${database_host}"
  debug "database_user: ${database_user}"
  debug "database_password: ${database_password}"
  debug "database_name: ${database_name}"

  if create-database "${backup_dir}" "${database_host}" "${database_user}" \
                     "${database_password}" "${database_name}" "${database_root_password}"; then
      restore-database-content "${backup_dir}" "${database_user}" "${database_password}" "${database_name}"
  fi
}

#
# Returns 0 if the database was created, 1 if the database already exists. Fails on database creation failure.
#
function create-database() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_host=$2
  local database_user=$3
  local database_password=$4
  local database_name=$5
  local database_root_password=$6
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${database_host} ]] && fail "'database_host' not provided"
  [[ -z ${database_user} ]] && fail "'database_user' not provided"
  [[ -z ${database_password} ]] && fail "'database_password' not provided"
  [[ -z ${database_name} ]] && fail "'database_name' not provided"
  [[ -z ${database_root_password} ]] && fail "'database_root_password' not provided"

  local result
  result=$(mysql -u root -p${database_root_password} -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='${database_name}'")
  if [[ -n ${result} ]]; then
    info "database ${database_name} already exists, will not create and will not restore content; delete the database if you want to restore content"
    return 1
  fi

cat <<EOF > ${backup_dir}/database-creation-statements.sql
CREATE USER '${database_user}'@'${database_host}' IDENTIFIED BY '${database_password}';
CREATE DATABASE ${database_name};
GRANT ALL PRIVILEGES ON ${database_name}.* TO '${database_user}'@'${database_host}';
FLUSH PRIVILEGES;
COMMIT;
exit
EOF
  info "creating database ${database_name} ..."
  if mysql -u root -p${database_root_password} < ${backup_dir}/database-creation-statements.sql; then
    info "database ${database_name} and user ${database_user} successfully created"
    return 0
  else
    fail "failed to create database ${database_name} and/or user ${database_user}"
  fi
}

function restore-database-content() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_user=$2
  local database_password=$3
  local database_name=$4
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${database_user} ]] && fail "'database_user' not provided"
  [[ -z ${database_password} ]] && fail "'database_password' not provided"
  [[ -z ${database_name} ]] && fail "'database_name' not provided"

  # shellcheck disable=SC2153
  local database_backup_file=${backup_dir}/${DATABASE_BACKUP_FILE}
  [[ -f ${database_backup_file} ]] || fail "database backup file not found: ${database_backup_file}"

  info "restoring content for database ${database_name} ..."
  if mysql -u ${database_user} -p${database_password} ${database_name} < ${database_backup_file}; then
    info "database ${database_name} successfully restored"
  else
    fail "failed to restore database ${database_name}"
  fi
}

#
# Return at stdout the comma-separated list of dropped skins (may be empty), followed by SEPARATOR, followed by the
# comma-separated list of extensions that were not found installed locally (they will have to be installed manually)
#
function restore-local-settings() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"

  local source_mediawiki_dir source_local_settings_file dropped_skins dropped_extensions target_local_settings_file

  source_mediawiki_dir=$(backup-dir-to-mediawiki-dir "${backup_dir}")
  source_local_settings_file=${source_mediawiki_dir}/LocalSettings.php
  [[ -f ${source_local_settings_file} ]] || fail "no LocalSettings.php found in ${source_mediawiki_dir}"

  dropped_skins=$(filter-obsolete-skins "${source_local_settings_file}" "${target_mediawiki_dir}")
  dropped_extensions=$(filter-locally-absent-extensions "${source_local_settings_file}" "${target_mediawiki_dir}")

  cp ${source_local_settings_file} ${target_mediawiki_dir} || fail "failed to copy ${source_local_settings_file} to ${target_mediawiki_dir}"
  target_local_settings_file=${target_mediawiki_dir}/LocalSettings.php
  chown ${APACHE_USER}:${APACHE_GROUP} ${target_local_settings_file} || fail "failed to chown ${APACHE_USER}:${APACHE_GROUP} ${target_local_settings_file}"
  chmod go-rwx ${target_local_settings_file} || fail "failed to chmod ${target_local_settings_file}"
  info "$(basename ${target_local_settings_file}) restored"

  echo "${dropped_skins}${SEPARATOR}${dropped_extensions}"
}

#
# Update source LocalSettings.php in-place, dropping obsolete skins. Return at stdout a comma separated list of dropped
# skins, or empty string if none was dropped.
#
function filter-obsolete-skins() {

  debug "${FUNCNAME[0]}($*)"
  local source_local_settings_file=$1
  local target_mediawiki_dir=$2
  [[ -z ${source_local_settings_file} ]] && fail "'source_local_settings_file' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_skins=""
  for s in $(cat ${source_local_settings_file} | grep "wfLoadSkin(.*)" | sed -e 's/^.*wfLoadSkin( *.\(.*\)[^ ] *).*$/\1/'); do
      [[ -z ${source_skins} ]] && source_skins=${s} || source_skins="${source_skins} ${s}"
  done
  [[ -z ${source_skins} ]] && { warn "no skins defined in ${source_local_settings_file}"; return 0; }
  local skins_to_remove
  for s in ${source_skins}; do
    if [[ ! -d ${target_mediawiki_dir}/skins/${s} ]]; then
        #
        # the skin does not exist in the target MediaWiki installation, remove it from LocalSettings.php
        #
        debug "skin ${s} does not exist in the target MediaWiki installation"
        [[ -z ${skins_to_remove} ]] && skins_to_remove=${s} || skins_to_remove="${skins_to_remove} ${s}"
    fi
  done
  [[ -z ${skins_to_remove} ]] && { info "no obsolete skins found"; return 0; }
  for s in ${skins_to_remove}; do
    sed -i -e 's/^\(.*wfLoadSkin( *.'${s}'[^ ] *).*\)$/\/\/ \1/' ${source_local_settings_file} && \
      info "skin ${s} commented out in $(basename ${source_local_settings_file})" || \
      fail "failed to comment out skin ${s} from ${source_local_settings_file}"
  done
  echo "${skins_to_remove}"
}

#
# Update source LocalSettings.php in-place, dropping extensions that are not found locally in the target MediaWiki
# directory. Since we're upgrading, the old extensions are most likely obsolete and will have to be installed manually.
# Return at stdout a comma separated list of extensions, or empty string if none was dropped.
#
function filter-locally-absent-extensions() {

  debug "${FUNCNAME[0]}($*)"
  local source_local_settings_file=$1
  local target_mediawiki_dir=$2
  [[ -z ${source_local_settings_file} ]] && fail "'source_local_settings_file' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_extensions=""
  for e in $(cat ${source_local_settings_file} | grep "wfLoadExtension(.*)" | sed -e 's/^.*wfLoadExtension( *.\(.*\)[^ ] *).*$/\1/'); do
      [[ -z ${source_extensions} ]] && source_extensions=${e} || source_extensions="${source_extensions} ${e}"
  done
  [[ -z ${source_extensions} ]] && { warn "no extensions defined in ${source_local_settings_file}"; return 0; }
  local extensions_to_remove
  for e in ${source_extensions}; do
    if [[ ! -d ${target_mediawiki_dir}/extensions/${e} ]]; then
        #
        # the extension does not exist in the target MediaWiki installation, remove it from LocalSettings.php
        #
        debug "extension ${e} does not exist in the target MediaWiki installation"
        [[ -z ${extensions_to_remove} ]] && extensions_to_remove=${e} || extensions_to_remove="${extensions_to_remove} ${e}"
    fi
  done
  [[ -z ${extensions_to_remove} ]] && { info "no missing extensions found"; return 0; }
  for e in ${extensions_to_remove}; do
    sed -i -e 's/^\(.*wfLoadExtension( *.'${e}'[^ ] *).*\)$/\/\/ \1/' ${source_local_settings_file} && \
      info "extension ${e} commented out in $(basename ${source_local_settings_file})" || \
      fail "failed to comment out extension ${e} from ${source_local_settings_file}"
  done
  echo "${extensions_to_remove}"
}


function restore-image-files() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_mediawiki_dir
  source_mediawiki_dir=$(backup-dir-to-mediawiki-dir "${backup_dir}")

  local source_image_dir=${source_mediawiki_dir}/images
  [[ -d ${source_image_dir} ]] || fail "no image directory found in ${source_mediawiki_dir}"
  cp -r ${source_image_dir} ${target_mediawiki_dir} || fail "failed to copy ${source_image_dir} to ${target_mediawiki_dir}"
  local target_image_dir=${target_mediawiki_dir}/images
  chown -R ${APACHE_USER}:${APACHE_GROUP} ${target_image_dir} || fail "failed to chown ${APACHE_USER}:${APACHE_GROUP} ${target_image_dir}"
  info "$(basename ${target_image_dir}) directory restored"
}

function restore-certificates-and-keys() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"

  local source_dir=${backup_dir}/etc/pki/tls/certs
  [[ -d ${source_dir} ]] || fail "no certificate directory found in ${backup_dir}: ${source_dir}"
  cp ${source_dir}/*.crt /etc/pki/tls/certs || fail "failed to copy ${source_dir}/*.crt to /etc/pki/tls/certs"

  local source_dir=${backup_dir}/etc/pki/tls/private
  [[ -d ${source_dir} ]] || fail "no key directory found in ${backup_dir}: ${source_dir}"
  for i in ${source_dir}/*.key; do
    cp ${i} /etc/pki/tls/private || fail "failed to copy ${i} to /etc/pki/tls/private"
    chmod go-rwx /etc/pki/tls/private/$(basename ${i}) || fail "failed to chmod /etc/pki/tls/private/$(basename ${i})"
  done
  info "certificates and private keys restored in /etc/pki/tls"
}

#
# Normally should not be used, as we do not want to backup and restore skins, but use the new ones that come with the
# new version.
#
function restore-skins() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_mediawiki_dir
  source_mediawiki_dir=$(backup-dir-to-mediawiki-dir "${backup_dir}")

  local skins="CologneBlue Modern"

  for s in ${skins}; do
    local source_skin_dir=${source_mediawiki_dir}/skins/${s}
    [[ -d ${source_skin_dir} ]] || fail "no skin directory found in ${source_mediawiki_dir}"
    cp -r ${source_skin_dir} ${target_mediawiki_dir}/skins || fail "failed to copy ${source_skin_dir} to ${target_mediawiki_dir}/skins"
    local target_skin_dir=${target_mediawiki_dir}/skins/${s}
    chown -R ${APACHE_USER}:${APACHE_GROUP} ${target_skin_dir} || fail "failed to chown ${APACHE_USER}:${APACHE_GROUP} ${target_skin_dir}"
    info "$(basename ${target_skin_dir}) skin restored"
  done
}

#
# Normally should not be used, as we do not want to backup and restore extensions, but install the up-to-date extensions
# from scratch in top of the new version
#
function restore-extensions() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_mediawiki_dir
  source_mediawiki_dir=$(backup-dir-to-mediawiki-dir "${backup_dir}")

  local extensions="BreadCrumbs"

  for e in ${extensions}; do
    local source_extension_dir=${source_mediawiki_dir}/extensions/${e}
    [[ -d ${source_extension_dir} ]] || fail "no extension directory found: ${source_extension_dir}"
    cp -r ${source_extension_dir} ${target_mediawiki_dir}/extensions || fail "failed to copy ${source_extension_dir} to ${target_mediawiki_dir}/extensions"
    local target_extension_dir=${target_mediawiki_dir}/extensions/${e}
    chown -R ${APACHE_USER}:${APACHE_GROUP} ${target_extension_dir} || fail "failed to chown ${APACHE_USER}:${APACHE_GROUP} ${target_extension_dir}"
    info "$(basename ${target_extension_dir}) extension restored"
  done
}

function manual-post-install-warning() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  local dropped_skins_SEPARATOR_dropped_extensions=$3
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"

  info ""
  info ""
  local dropped_skins=${dropped_skins_SEPARATOR_dropped_extensions%${SEPARATOR}*}
  [[ -n ${dropped_skins} ]] && info "commented out skins: ${dropped_skins}" || info "no skins were commented out"
  local dropped_extensions=${dropped_skins_SEPARATOR_dropped_extensions#*${SEPARATOR}}
  [[ -n ${dropped_extensions} ]] && info "commented out extensions: ${dropped_extensions}" || info "no extensions were commented out"
  info ""
  info ""
  warn "continue with manual post-restore steps:"
  warn ""
  warn " - if this was an upgrade to a newer MediaWiki version, run php update in ${target_mediawiki_dir}/maintenance"
  warn " - configure the Listen directive and the virtual host in /etc/httpd/conf.d/ssl.conf"
  [[ -n ${dropped_extensions} ]] && warn " - re-install the following extensions: ${dropped_extensions}"
  info ""
}

main "$@"
