#!/usr/bin/env bash

[[ -f $(dirname "$0")/../lib/bash.shlib ]] && . $(dirname $0)/../lib/bash.shlib || { echo "$(dirname $0)/../lib/bash.shlib not found" 1>&2; exit 1; }
[[ -f $(dirname "$0")/mediawiki.shlib ]] && . $(dirname "$0")/mediawiki.shlib || { echo "$(dirname "$0")/mediawiki.shlib not found" 1>&2; exit 1; }

function usage() {

cat <<EOF

$(basename $0) is a tool to restore a mediawiki instance (database content, files, extensions, configuration and
everything is needed to fully restore the instance) from a backup file created by mediawiki-backup script.
$(basename $0) reads the backup file and restores the state of the old instance, given a new pre-installed but empty
new instance.

The script will interactively request the MySQL root account password.

Usage:

  $(basename $0) <backup-file> <mediawiki-installation-dir>

Arguments:

  <backup-file> is the backup file produced by the peer mediawiki-backup script.

  <mediawiki-installation-dir> is the local file system directory where the mediawiki instance to restore state into
    is installed (by default /var/www/mediawiki-<version>).

Options:

 -p|--preserve-tmp Optional boolean flag that instructs the program to preserve the temporary directory.

EOF
}

function main() {

  process-common-arguments "$@" && set -- "${ARGS[@]}" || fail "failed to process common arguments"

  ${HELP} || [[ -z $1 ]] && { usage; exit 0; }

  unset ARGS
  declare -a ARGS
  declare -A OPTIONS
  OPTIONS["--preserve-tmp"]="boolean -p"
  process-options "$@"
  fail-on-unknown-arguments 2

  local tmp_dir
  tmp_dir=$(get-tmp-dir) || exit 1
  trap "mediawiki-cleanup ${tmp_dir} ${OPTIONS[--preserve-tmp]}" EXIT

  restore-mediawiki "${ARGS[0]}" "${ARGS[1]}" "${tmp_dir}"
}

function restore-mediawiki() {

  debug "${FUNCNAME[0]}($*)"
  local backup_file=$1
  local target_mediawiki_dir=$2
  local tmp_dir=$3

  debug "backup_file: ${backup_file}"
  debug "target_mediawiki_dir: ${target_mediawiki_dir}"
  debug "tmp_dir: ${tmp_dir}"

  ensure-root
  ensure-valid-mediawiki-dir "${target_mediawiki_dir}" --expect-LocalSettings
  exit 0

  local database_root_password
  database_root_password=$(read-database-root-password)

  local backup_dir
  backup_dir=$(expand-backup "${backup_file}" "${tmp_dir}") || exit 1
  debug "backup_dir: ${backup_dir}"
  restore-database "${backup_dir}" "${database_root_password}"
  restore-local-settings "${backup_dir}"
  restore-image-files "${backup_dir}"
  manual-post-install-warning
}

#
# The password will be requested twice, for verification.
#
# Once a match is confirmed, the value will be returned to stdout.
#
function read-database-root-password() {

  debug "${FUNCNAME[0]}()"
  local password
  read -r -s -p "database root password: " password
  echo "" 1>&2
  local password2
  read -r -s -p "repeat database root password: " password2
  echo "" 1>&2
  [[ ${password} != "${password2}" ]] && fail "passwords do not match"
  echo ${password}
}

#
# Expand the backup file and ensure it is a valid mediawiki backup.
# Return the backup directory at stdout.
#
function expand-backup() {

  debug "${FUNCNAME[0]}($*)"

  local backup_file=$1
  local tmp_dir=$2
  [[ -f ${backup_file} ]] || fail "no such backup file: ${backup_file}"
  info "extracting backup from ${backup_file} ..."
  tar xfz ${backup_file} -C ${tmp_dir} || fail "failed to extract backup file ${backup_file} in ${tmp_dir}"
  local backup_dir_name
  backup_dir_name=$(ls ${tmp_dir})
  local backup_dir=${tmp_dir}/${backup_dir_name}
  [[ -d ${backup_dir} ]] || fail "the backed up content directory does not exist: ${backup_dir}"
  echo ${backup_dir}
}

function restore-database() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_root_password=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -d ${backup_dir} ]] || fail "no such backup directory: ${backup_dir}"
  [[ -z ${database_root_password} ]] && fail "'database_root_password' not provided"
  local database_metadata_file=${backup_dir}/${DATABASE_METADATA_FILE}
  [[ -f ${database_metadata_file} ]] || fail "no database metadata file found in backup: ${database_metadata_file}"

  local database_host database_user database_password database_name

  database_host=$(cat ${database_metadata_file} | grep "database_host=" | sed -e 's/^.*=\([^ ]*\) *$/\1/') || exit 1
  database_user=$(cat ${database_metadata_file} | grep "database_user=" | sed -e 's/^.*=\([^ ]*\) *$/\1/') || exit 1
  database_password=$(cat ${database_metadata_file} | grep "database_password=" | sed -e 's/^.*=\([^ ]*\) *$/\1/') || exit 1
  database_name=$(cat ${database_metadata_file} | grep "database_name=" | sed -e 's/^.*=\([^ ]*\) *$/\1/') || exit 1

  debug "database_host: ${database_host}"
  debug "database_user: ${database_user}"
  debug "database_password: ${database_password}"
  debug "database_name: ${database_name}"

  create-database \
    "${backup_dir}" \
    "${database_host}" \
    "${database_user}" \
    "${database_password}" \
    "${database_name}" \
    "${database_root_password}"

  restore-database-content "${backup_dir}" "${database_user}" "${database_password}" "${database_name}"
}

function create-database() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_host=$2
  local database_user=$3
  local database_password=$4
  local database_name=$5
  local database_root_password=$6
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${database_host} ]] && fail "'database_host' not provided"
  [[ -z ${database_user} ]] && fail "'database_user' not provided"
  [[ -z ${database_password} ]] && fail "'database_password' not provided"
  [[ -z ${database_name} ]] && fail "'database_name' not provided"
  [[ -z ${database_root_password} ]] && fail "'database_root_password' not provided"

cat <<EOF > ${backup_dir}/database-creation-statements.sql
CREATE USER '${database_user}'@'${database_host}' IDENTIFIED BY '${database_password}';
CREATE DATABASE ${database_name};
GRANT ALL PRIVILEGES ON ${database_name}.* TO '${database_user}'@'${database_host}';
FLUSH PRIVILEGES;
COMMIT;
exit
EOF
  info "creating database ${database_name} ..."
  if mysql -u root -p${database_root_password} < ${backup_dir}/database-creation-statements.sql; then
    info "database ${database_name} and user ${database_user} successfully created"
  else
    fail "failed to create database ${database_name} and/or user ${database_user}"
  fi
}

function restore-database-content() {

  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_user=$2
  local database_password=$3
  local database_name=$4
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${database_user} ]] && fail "'database_user' not provided"
  [[ -z ${database_password} ]] && fail "'database_password' not provided"
  [[ -z ${database_name} ]] && fail "'database_name' not provided"

  # shellcheck disable=SC2153
  local database_backup_file=${backup_dir}/${DATABASE_BACKUP_FILE}
  [[ -f ${database_backup_file} ]] || fail "database backup file not found: ${database_backup_file}"

  info "restoring content for database ${database_name} ..."
  if mysql -u ${database_user} -p${database_password} ${database_name} < ${database_backup_file}; then
    info "database ${database_name} successfully restored"
  else
    fail "failed to restore database ${database_name}"
  fi
}

function manual-post-install-warning() {

  warn ""
  warn "continue with manual post-restore steps:"
  warn " - if this was an upgrade to a newer MediaWiki version, run php update."
  warn " - configure the virtual host in ssl.conf."
  warn ""
}

#VERBOSE=true
main "$@"
