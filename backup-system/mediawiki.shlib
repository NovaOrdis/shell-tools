#!/usr/bin/env bash

DATABASE_BACKUP_DIR_NAME=database
DATABASE_BACKUP_FILE=${DATABASE_BACKUP_DIR_NAME}/database-backup.sql
DATABASE_METADATA_FILE=${DATABASE_BACKUP_DIR_NAME}/database.conf

#
# fail if we are not root. We want to archive as root to preserve the original file ownership.
#
function ensure-root() {

  debug "${FUNCNAME[0]}()"
  [[ $(id -u) != "0" ]] && fail "$(basename $0) is not run as root but as $(id -u)"
}

#
# Options:
#  --expect-LocalSettings
#
function ensure-valid-mediawiki-dir() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  shift
  local expect_LocalSettings=false
  while [[ -n $1 ]]; do
      if [[ $1 = "--expect-LocalSettings" ]]; then
        expect_LocalSettings=true
      fi
      shift
  done
  [[ -z ${mediawiki_dir} ]] && fail "no MediaWiki directory specified"
  [[ ! -d ${mediawiki_dir} ]] && fail "not a directory: ${mediawiki_dir}"
  [[ ! -f ${mediawiki_dir}/resources/assets/mediawiki.png ]] && fail "not a mediawiki directory, missing resources/assets/mediawiki.png: ${mediawiki_dir}"
  ${expect_LocalSettings} && [[ ! -f ${mediawiki_dir}/LocalSettings.php ]] && fail "not a mediawiki directory, missing LocalSettings.php: ${mediawiki_dir}"
}

function mediawiki-cleanup() {

  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1
  local preserve_tmp=${2:-false}

  if ${preserve_tmp}; then
    debug "temporary directory ${tmp_dir} preserved"
  else
    rm -rf "${tmp_dir}" && debug "removed temporary directory ${tmp_dir}" || warn "failed to remove temporary directory ${tmp_dir}"
  fi
}

