#!/usr/bin/env bash

[[ -f $(dirname "$0")/../lib/bash.shlib ]] && . $(dirname $0)/../lib/bash.shlib || { echo "$(dirname $0)/../lib/bash.shlib not found" 1>&2; exit 1; }

function usage() {

cat <<EOF

$(basename $0) is a tool to backup a mediawiki instance (database content, files, extensions, configuration and
everything is needed to fully restore the instance). $(basename $0) produces a single file that can be used as
argument to restore-mediawiki to restore the instance.

Usage:

  $(basename $0) <mediawiki-installation-dir> [-t|--target-dir <dir>]

<mediawiki-installation-dir> is the local file system directory where the mediawiki instance is installed
(by default /var/www/mediawiki-<version>). The backup file is placed in the current directory, unless
-t|--target-dir option is used.

Options:

 -t|--target-dir Optional designation of the target directory. If no option is specified, the current directory
   is used as target directory.

 -p|--preserve-tmp Optional boolean flag that instructs the program to preserve the temporary directory.

EOF
}

function main() {

  process-common-arguments "$@" && set -- "${ARGS[@]}" || fail "failed to process common arguments"

  ${HELP} || [[ -z $1 ]] && { usage; exit 0; }

  unset ARGS
  declare -a ARGS
  declare -A OPTIONS
  OPTIONS["--target-dir"]="string -t"
  OPTIONS["--preserve-tmp"]="boolean -p"
  process-options "$@"
  fail-on-unknown-arguments 1

  local tmp_dir
  tmp_dir=$(get-tmp-dir) || exit 1
  trap "cleanup ${tmp_dir} ${OPTIONS[--preserve-tmp]}" EXIT

  backup-mediawiki "${ARGS[0]}" "${tmp_dir}" "${OPTIONS[--target-dir]}"
}

function backup-mediawiki() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  local tmp_dir=$2
  local target_dir=${3:-.}

  debug "mediawiki_dir: ${mediawiki_dir}"
  debug "tmp_dir: ${tmp_dir}"
  debug "target_dir: ${target_dir}"

  ensure-valid-mediawiki-dir "${mediawiki_dir}"
  ensure-root

  local dated_tmp_dir
  dated_tmp_dir=$(create-dated-subdir "${tmp_dir}") || exit 1
  backup-database "${mediawiki_dir}" "${dated_tmp_dir}"
  backup-server-files "${mediawiki_dir}" "${dated_tmp_dir}"
  build-backup-archive "${dated_tmp_dir}" "${target_dir}"
}

function ensure-valid-mediawiki-dir() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  [[ -z ${mediawiki_dir} ]] && fail "no mediawiki directory specified"
  [[ ! -d ${mediawiki_dir} ]] && fail "not a directory: ${mediawiki_dir}"
  [[ ! -f ${mediawiki_dir}/LocalSettings.php ]] && fail "not a mediawiki directory, missing LocalSettings.php: ${mediawiki_dir}"
}

#
# fail if we are not root. We want to archive as root to preserve the original file ownership.
#
function ensure-root() {

  debug "${FUNCNAME[0]}()"
  [[ $(id -u) != "0" ]] && fail "$(basename $0) is not run as root but as $(id -u)"
}

#
# Creates a dated subdirectory in the given directory and return the path to stdout. The parent must exist
#
function create-dated-subdir() {

  debug "${FUNCNAME[0]}($*)"
  local parent_dir=$1
  [[ -d ${parent_dir} ]] || fail "parent directory does not exist: ${parent_dir}"
  local dir
  dir=${parent_dir}/$(date +'%Y.%m.%d-%H.%M.%S')-mediawiki-backup
  mkdir "${dir}" || fail "failed to create dated subdirectory: ${dir}"
  echo "${dir}"
}

#
# Second argument is the variable name (wgDBserver for database server name, etc.)
# Fail is no file or no corresponding value is found.
#
function get-php-defined-value() {

    debug "${FUNCNAME[0]}($*)"
    local f=$1
    local name=$2
    [[ -f ${f} ]] || fail "no such file: ${f}"
    local value
    value=$(cat ${f} | grep "\$${name} *= *" | sed -e 's/^.* *= *"\(.*\)".*$/\1/')
    [[ -z ${value} ]] && fail "\$${name}  not defined in ${f}"
    echo "${value}"
}

function backup-database() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  local tmp_dir=$2 # tmp dir is supposed to exist
  local local_settings_file=${mediawiki_dir}/LocalSettings.php
  local database_host database_user database_password database_name
  database_host=$(get-php-defined-value "${local_settings_file}" wgDBserver) || exit 1
  database_user=$(get-php-defined-value "${local_settings_file}" wgDBuser) || exit 1
  database_password=$(get-php-defined-value "${local_settings_file}" wgDBpassword) || exit 1
  database_name=$(get-php-defined-value "${local_settings_file}" wgDBname) || exit 1

  debug "database_host: ${database_host}"
  debug "database_user: ${database_user}"
  debug "database_password: ${database_password}"
  debug "database_name: ${database_name}"

  local backup_file=${tmp_dir}/database-backup.sql
  debug "backing up database in ${backup_file} ..."
  if mysqldump -h ${database_host} -u ${database_user} --password=${database_password} --default-character-set=binary ${database_name} > ${backup_file}; then
    info "database backup successful, backup size $(wc -c ${backup_file} | awk '{print $1}') bytes"
  else
    fail "failed to backup database"
  fi
}

#
# Recursively copies the entire mediawiki installation tree, preserving
#
function backup-server-files() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  local tmp_dir=$2 # tmp dir is supposed to exist

  mediawiki_dir=${mediawiki_dir%/}
  debug "backing up server files from ${mediawiki_dir} to ${tmp_dir} ..."
  if cp --archive "${mediawiki_dir}" "${tmp_dir}"; then
    info "server directory backup successful: ${mediawiki_dir}"
  else
    fail "failed to backup server directory ${mediawiki_dir} in ${tmp_dir}"
  fi
}

function build-backup-archive() {

  debug "${FUNCNAME[0]}($*)"
  local dated_tmp_dir=$1
  local target_dir=$2
  local name command
  target_dir=${target_dir%/}
  name=$(basename ${dated_tmp_dir})
  command="tar -cpszf ${target_dir}/${name}.tgz -C $(dirname ${dated_tmp_dir}) ${name}"
  debug "executing ${command}"
  if ${command}; then
    info "backup archive: ${target_dir}/${name}.tgz"
  else
    fail "failed to execute ${command}"
  fi
}

function cleanup() {

  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1
  local preserve_tmp=${2:-false}

  if ${preserve_tmp}; then
    debug "temporary directory ${tmp_dir} preserved"
  else
    rm -rf "${tmp_dir}" && debug "removed temporary directory ${tmp_dir}" || warn "failed to remove temporary directory ${tmp_dir}"
  fi
}

main "$@"
