#!/bin/bash

#FILESYSTEMS_TO_BACKUP="\
#/volume1/base \
#/volume1/dovecot \
#/volume1/jspwiki \
#/volume1/timesnap \
#/volume2/livingroom \
#/volume3/projects \
#/volume4/backups"

FILESYSTEMS_TO_BACKUP="\
/volume1/jspwiki \
/volume1/timesnap \
/volume4/backups"

RACKSTATION_IP=192.168.1.4

LOCAL_RACKSTATIONB_MOUNT_POINT=/rackstationb

#[ -d /Volumes/base ] || { echo "/Volumes/base not mounted" 1>&2; exit 1; }
#[ -d /Volumes/livingroom ] || { echo "/Volumes/livingroom not mounted" 1>&2; exit 1; }
#[ -d /Volumes/RackStationB ] || { echo "The target USB drive was not mounted" 1>&2; exit 1; }
#
#rsync -avz /Volumes/base /Volumes/RackStationB && echo "base synchronized" || { echo "failed to synchronize base" 1>&2; exit 1; }
#rsync -avz /Volumes/livingroom /Volumes/RackStationB && echo "livingroom synchronized" || { echo "failed to synchronize livingroom" 1>&2; exit 1; }

function display_help() {

cat <<EOF

Utility to backup selected RackStation filesystem on a local disk, via rsync/ssh.

EOF

}
function main() {

    for i in ${FILESYSTEMS_TO_BACKUP}; do
        backup-filesystem ${i} || echo "failed to backup filesystem ${i}" 1>&2;
    done
}

function backup-filesystem() {

    local rackstation_filesystem=$1

    echo "backing up ${rackstation_filesystem} ..."

    local volume_dir=${rackstation_filesystem/\//}
    volume_dir=${volume_dir%%/*}

    local local_dir=${LOCAL_RACKSTATIONB_MOUNT_POINT}/${volume_dir}

    if [ ! -d ${local_dir} ]; then

        mkdir ${local_dir} || { echo "failed to create directory ${local_dir}" 1>&2; return 1; }

    fi

    rsync -avzhe ssh --rsync-path=/usr/syno/bin/rsync root@${RACKSTATION_IP}:${rackstation_filesystem} ${local_dir} && echo "${rackstation_filesystem} ok"

}
main "$@"

